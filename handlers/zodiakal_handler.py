from aiogram.types import CallbackQuery, Message
from keyboard.keyboard import keyboard, menu_button
from config.config import zodiaks, dates, dp, bot, menu, space_list
from request.request import get_url, get_data, get_response
# from photos_dark.photo_redactor import abs_path, image_redactor
# import asyncio
from keyboard.paginator import send_page
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup


class Zodiacal(StatesGroup):
    zodiac_name = State()
    date_name = State()
    pagination_page = State()


@dp.callback_query_handler(text=["–ó–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π üïâ"])
async def zodiak_inline_keyboard(call: CallbackQuery):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –ó–æ–¥–∏–∞–∫–∞–ª—å–Ω—ã–π üïâ"""
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await Zodiacal.zodiac_name.set()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ üíü", reply_markup=keyboard(3, zodiaks, 12, space_list()))


@dp.message_handler(lambda message: message.text, state=Zodiacal.zodiac_name)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                                  reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –∫–Ω–æ–ø–∫–æ–π üì±")


@dp.callback_query_handler(state=Zodiacal.zodiac_name, text=[key for key in zodiaks().keys()])
async def date_inline_keyboard(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥–∏–∞–∫–∞"""
    # –õ–æ–≤–∏–º –∫–æ–ª–±—ç–∫ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    zodiak_sign = call.data
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã–µ
    async with state.proxy() as user_data:
        user_data["–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"] = zodiaks()[zodiak_sign]
    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id, reply_markup=None)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await Zodiacal.next()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏
    await call.message.answer(zodiak_sign, reply_markup=keyboard(1, dates, 5, space_list()))
    await call.answer()


@dp.message_handler(lambda message: message.text, state=Zodiacal.date_name)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∫–Ω–æ–ø–∫–æ–π üì±")

@dp.callback_query_handler(state=Zodiacal.date_name, text=["–°–µ–≥–æ–¥–Ω—è üìÜ", "–ó–∞–≤—Ç—Ä–∞ üìÜ", "–ù–µ–¥–µ–ª—è üìÜ"])
async def request_answer(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞"""
    # –õ–æ–≤–∏–º –∫–æ–ª–±—ç–∫ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    date = call.data
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã–µ
    async with state.proxy() as user_data:
        user_data["–î–∞—Ç–∞"] = dates()[date]
    # –ü–æ–ª—É—á–∞–µ–º url –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∑–∞–ø—Ä–æ—Å
    url = get_url("prediction", user_data["–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"], user_data["–î–∞—Ç–∞"])
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å(—Å–ø–∏—Å–æ–∫ —Å –Ω–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –∏–∑ —Å–∞–π—Ç–∞)
    request = get_data(get_response(url))
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {date.lower()}")
    # –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç
    # –ø–æ–∫–∞–∑–∞–ª—Å—è –º–Ω–µ –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—Ç–æ—Ä—ã–º
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –ø–∞–ø–∫–∏
    await call.message.answer_photo(open(f"photos_light/{user_data['–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞']}.jpeg", "rb"))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–∫—Å—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await call.message.answer("\n".join(request).replace("&ndash;", " ").replace("&nbsp;", " "), reply_markup=menu_button())
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await Zodiacal.next()
    await call.answer()


@dp.callback_query_handler(state=Zodiacal.date_name, text=["–ú–µ—Å—è—Ü üìÜ", "–ì–æ–¥ üìÜ"])
async def request_answer(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—ã–±–æ—Ä–æ–º –ø–µ—Ä–∏–æ–¥–∞"""
    # –õ–æ–≤–∏–º –∫–æ–ª–±—ç–∫ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    date = call.data
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã–µ
    async with state.proxy() as user_data:
        user_data["–î–∞—Ç–∞"] = dates()[date]
    # –ü–æ–ª—É—á–∞–µ–º url –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –∑–∞–ø—Ä–æ—Å
    url = get_url("prediction", user_data["–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"], user_data["–î–∞—Ç–∞"])
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å(—Å–ø–∏—Å–æ–∫ —Å –Ω–∞—à–∏–º —Ç–µ–∫—Å—Ç–æ–º –∏–∑ —Å–∞–π—Ç–∞)
    request = get_data(get_response(url))
    request_filtred = "\n".join(request).replace("&ndash;", " ").replace("&nbsp;", " ").split("\n")
    await bot.edit_message_reply_markup(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        reply_markup=None
    )
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {date.lower()}")
    # –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –∏ –æ—Ç–¥–µ–ª—å–Ω–æ —Ç–µ–∫—Å—Ç
    # –ø–æ–∫–∞–∑–∞–ª—Å—è –º–Ω–µ –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω—ã–º –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—Ç–æ—Ä—ã–º
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ –ø–∞–ø–∫–∏
    await call.message.answer_photo(open(f"photos_light/{user_data['–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞']}.jpeg", "rb"))
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–µ–∫—Å—Ç–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    await send_page(request_filtred, call.message)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await Zodiacal.next()
    await call.answer()
    # for i in range(len(data)):
    #     await call.message.answer(data[i].replace("&ndash;", "").replace("&nbsp;", ""))
    # –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º, –ø–æ–¥–∫–ª—é—á–∞–µ–º –º–æ–¥—É–ª—å photo_redactor
    # image_redactor(abs_path, user_data["–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"], data, 20)
    # await asyncio.sleep(0.5)
    # await call.message.answer_photo(open(f"photo_with_text/{user_data['–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞']}.jpeg", "rb"))
    # await Zodiacal.next()
    # await call.answer()


@dp.message_handler(lambda message: message.text, state=Zodiacal.pagination_page)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - '–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üåü'")


@dp.callback_query_handler(lambda call: True, state=Zodiacal.pagination_page)
async def pagination_callback(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ–¥ —Ç–µ–∫—Å—Ç–æ–º"""
    # –õ–æ–≤–∏–º –Ω–∞—à–∏ —Ü–∏—Ñ—Ä—ã –æ—Ç –∫–Ω–æ–ø–æ–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    if call.data in [str(i) for i in range(1, 12)]:
        page = int(call.data)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π
        async with state.proxy() as user_data:
            user_data["–ü–∞–≥–∏–Ω–∞—Ü–∏—è"] = page
        url = get_url("prediction", user_data["–ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"], user_data["–î–∞—Ç–∞"])
        request = get_data(get_response(url))
        request_filtred = "\n".join(request).replace("&ndash;", " ").replace("&nbsp;", " ").split("\n")
        # –£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≤—ã–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏(—Å—Ç—Ä–∞–Ω–∏—á–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏)
        # —á—Ç–æ–±—ã —Ç–µ–∫—Å—Ç –∑–∞–º–µ–Ω—è–ª—Å—è, –∞ –Ω–µ –ø—Ä–∏—Å—ã–ª–∞–ª—Å—è —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        await bot.delete_message(
            call.message.chat.id,
            message_id=call.message.message_id
        )
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        await send_page(request_filtred, call.message, page)
        await call.answer()
    # –û—Ç–ª–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É "–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä", —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–∑–¥–µ–ª–µ
    # –∏ —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª
    elif call.data == "–ú–µ–Ω—é":
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ
        await state.finish()
        await call.message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                                  reply_markup=keyboard(1, menu, 6, space_list()))
        await call.answer()
