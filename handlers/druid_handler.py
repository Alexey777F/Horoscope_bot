from aiogram.types import Message, CallbackQuery
from config.config import dp, bot, druid, menu, choice_zodiac, space_list, druid_date_list
from keyboard.paginator import send_page
from keyboard.keyboard import keyboard
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.db import return_history


class Druid(StatesGroup):
    zodiac_choice = State()
    zodiac_name = State()
    pagination_page = State()


@dp.callback_query_handler(text=["–ì–æ—Ä–æ—Å–∫–æ–ø –¥—Ä—É–∏–¥–æ–≤ üå≥"])
async def druid_inline_keyboard(call: CallbackQuery):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –ì–æ—Ä–æ—Å–∫–æ–ø –¥—Ä—É–∏–¥–æ–≤ üå≥"""
    await Druid.zodiac_choice.set()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª", reply_markup=keyboard(1, choice_zodiac, 2, space_list()))


@dp.message_handler(lambda message: message.text, state=Druid.zodiac_choice)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(state=Druid.zodiac_choice, text=["–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ú–æ–π –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞ ‚ùì"])
async def what_is_my_zodiac_sign(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ –ú–æ–π –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞ ‚ùì"""
    await state.finish()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("–°–ø–∏—Å–æ–∫ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –¥–∞—Ç–∞–º", reply_markup=keyboard(1, druid, 22, druid_date_list()))
    await call.message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                         reply_markup=keyboard(1, menu, 6, space_list()))
    await call.answer()


@dp.callback_query_handler(state=Druid.zodiac_choice, text=["–Ø –∑–Ω–∞—é –°–≤–æ–π –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞ üíØ"])
async def i_know_my_zodiac_sign(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –Ø –∑–Ω–∞—é –°–≤–æ–π –ó–Ω–∞–∫ –ó–æ–¥–∏–∞–∫–∞ üíØ"""
    await state.finish()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await Druid.zodiac_name.set()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à–µ –¥—Ä–µ–≤–æ üå≥", reply_markup=keyboard(3, druid, 22, space_list()))


@dp.message_handler(lambda message: message.text, state=Druid.zodiac_name)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(state=Druid.zodiac_name, text=[key for key in druid().keys()])
async def druid_callback(call: CallbackQuery, state: FSMContext):
    tree = call.data
    async with state.proxy() as user_data:
        user_data["–î—Ä–µ–≤–æ"] = druid()[tree]
    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id,
                                        reply_markup=None)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {tree.lower()}")
    await call.message.answer_photo(open(f"photos_light/{user_data['–î—Ä–µ–≤–æ']}.jpeg", "rb"))
    await send_page(return_history(f'{user_data["–î—Ä–µ–≤–æ"]}')[0][0].split("\n"), call.message)
    await Druid.next()
    await call.answer()


@dp.message_handler(lambda message: message.text, state=Druid.pagination_page)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - '–ü–µ—Ä–µ–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é üåü'")


@dp.callback_query_handler(lambda call: True, state=Druid.pagination_page)
async def pagination_callback(call: CallbackQuery, state: FSMContext):
    if call.data in [str(i) for i in range(1, 12)]:
        page = int(call.data)
        async with state.proxy() as user_data:
            user_data["–ü–∞–≥–∏–Ω–∞—Ü–∏—è"] = page
        await bot.delete_message(
            call.message.chat.id,
            call.message.message_id
        )
        await send_page(return_history(f'{user_data["–î—Ä–µ–≤–æ"]}')[0][0].split("\n"), call.message,
                        page)
        await call.answer()
    elif call.data == "–ú–µ–Ω—é":
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        await bot.delete_message(
            call.message.chat.id,
            message_id=call.message.message_id
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ
        await state.finish()
        await call.message.answer("–£–∑–Ω–∞–π —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ —Ç–µ–±–µ —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                                  reply_markup=keyboard(1, menu, 6, space_list()))
        await call.answer()