from aiogram.types import Message, CallbackQuery
from config.config import dp, bot, menu, gender, space_list, zodiaks, zodiaks_compability
from keyboard.paginator import send_page
from keyboard.keyboard import keyboard
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.db import return_history


class Compatibility(StatesGroup):
    gender_choice = State()
    #–î–ª—è –º—É–∂—á–∏–Ω
    first_zodiac_name = State()
    second_zodiac_name = State()
    pagination_page = State()
    #–î–ª—è –∂–µ–Ω—â–∏–Ω
    w_first_zodiac_name = State()
    w_second_zodiac_name = State()
    w_pagination_page = State()


@dp.callback_query_handler(text=["–ì–æ—Ä–æ—Å–∫–æ–ø —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ üéé"])
async def druid_inline_keyboard(call: CallbackQuery):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –ì–æ—Ä–æ—Å–∫–æ–ø —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ üéé"""
    await Compatibility.gender_choice.set()
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer("–ì–æ—Ä–æ—Å–∫–æ–ø —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∑–Ω–∞–∫–∞–º –ó–æ–¥–∏–∞–∫–∞ üïâ\n\n" \
                                "–ê—Å—Ç—Ä–æ–ª–æ–≥–∏—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –≤—Å–µ–≥–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–≥—Ä–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å. " \
                                "–ó–Ω–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤, —Å–æ–≥–ª–∞—Å–Ω–æ –∫–æ—Ç–æ—Ä—ã–º —Å–∫–ª–∞–¥—ã–≤–∞—é—Ç—Å—è –æ—Ç–Ω–æ—à–µ–Ω–∏—è " \
                                "–≤ –ø–∞—Ä–µ, –ø–æ–º–æ–∂–µ—Ç –ø–æ–Ω—è—Ç—å, —á—Ç–æ —á—É–≤—Å—Ç–≤—É–µ—Ç –ª—é–±–∏–º—ã–π —á–µ–ª–æ–≤–µ–∫, –∫–∞–∫ —Å–µ–±—è –≤–µ—Å—Ç–∏, " \
                                "—á—Ç–æ–±—ã —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –æ–±—â–µ–Ω–∏—è –±—ã–ª–æ –≤–∑–∞–∏–º–Ω—ã–º üí´\n\n–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –∑–Ω–∞–∫–∞–º " \
                                "–ó–æ–¥–∏–∞–∫–∞ –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –ª—é–±–≤–∏ –≤ –ø–∞—Ä–µ; –Ω–æ –∏–º–µ–Ω–Ω–æ –±–ª–∞–≥–æ–¥–∞—Ä—è –µ–π –≤–ª—é–±–ª–µ–Ω–Ω—ã–µ " \
                                "–¥–æ—Å—Ç–∏–≥–∞—é—Ç –≥–∞—Ä–º–æ–Ω–∏–∏ üåü\n\n–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø–æ –∑–Ω–∞–∫–∞–º –ó–æ–¥–∏–∞–∫–∞ –ø–æ–∑–≤–æ–ª—è–µ—Ç " \
                                "–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –≤ —á–µ–º –∫—Ä–æ—é—Ç—Å—è –∏—Å—Ç–∏–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–∞—Ä—ã, –Ω–∞–π—Ç–∏ –ø—É—Ç–∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è –∏ " \
                                "—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∏–ª—É —á—É–≤—Å—Ç–≤ üíû")
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à –ø–æ–ª", reply_markup=keyboard(2, gender, 2, space_list()))


@dp.message_handler(lambda message: message.text, state=Compatibility.gender_choice)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(state=Compatibility.gender_choice, text=["–ú—É–∂—á–∏–Ω–∞üë®‚Äçü¶±"])
async def what_is_my_zodiac_sign(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –ú—É–∂—á–∏–Ω–∞üë®‚Äçü¶±"""
    gender = call.data
    async with state.proxy() as user_data:
        user_data["1–π –ü–æ–ª"] = gender
    async with state.proxy() as user_data:
        user_data["2–π –ü–æ–ª"] = "–ñ–µ–Ω—â–∏–Ω–∞üë©üèª"
    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id,
                                        reply_markup=None)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await Compatibility.next()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ú—É–∂—á–∏–Ω—ãüë®‚Äçü¶±", reply_markup=keyboard(3, zodiaks, 12, space_list()))
    await call.answer()


@dp.message_handler(lambda message: message.text, state=Compatibility.first_zodiac_name)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(state=Compatibility.first_zodiac_name, text=[key for key in zodiaks().keys()])
async def date_inline_keyboard(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥–∏–∞–∫–∞"""
    # –õ–æ–≤–∏–º –∫–æ–ª–±—ç–∫ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    zodiak_sign = call.data
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã–µ
    async with state.proxy() as user_data:
        user_data["1–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"] = zodiaks_compability()[zodiak_sign]
    async with state.proxy() as user_data:
        user_data["1–π Zod"] = zodiak_sign
    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id, reply_markup=None)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await Compatibility.next()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ñ–µ–Ω—â–∏–Ω—ãüë©üèª", reply_markup=keyboard(3, zodiaks, 12, space_list()))
    await call.answer()


@dp.message_handler(lambda message: message.text, state=Compatibility.second_zodiac_name)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(state=Compatibility.second_zodiac_name, text=[key for key in zodiaks().keys()])
async def date_inline_keyboard(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥–∏–∞–∫–∞"""
    zodiak_sign = call.data
    async with state.proxy() as user_data:
        user_data["2–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"] = zodiaks_compability()[zodiak_sign]
    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id, reply_markup=None)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n–ú—É–∂—á–∏–Ω–∞ - {user_data['1–π Zod']}\n–ñ–µ–Ω—â–∏–Ω–∞ - {zodiak_sign}")
    await send_page(return_history(f'{user_data["2–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"]}_{user_data["1–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"]}')[0][0].split("\n"), call.message)
    await Compatibility.next()
    await call.answer()


@dp.message_handler(lambda message: message.text, state=Compatibility.pagination_page)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(lambda call: True, state=Compatibility.pagination_page)
async def pagination_callback(call: CallbackQuery, state: FSMContext):
    if call.data in [str(i) for i in range(1, 12)]:
        page = int(call.data)
        async with state.proxy() as user_data:
            user_data["–ü–∞–≥–∏–Ω–∞—Ü–∏—è"] = page
        await bot.delete_message(
            call.message.chat.id,
            call.message.message_id
        )
        await send_page(return_history(f'{user_data["2–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"]}_{user_data["1–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"]}')[0][0].split("\n"), call.message, page)
        await call.answer()
    elif call.data == "–ú–µ–Ω—é":
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        await bot.delete_message(
            call.message.chat.id,
            message_id=call.message.message_id
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ
        await state.finish()
        await call.message.answer("–£–∑–Ω–∞–π —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ —Ç–µ–±–µ —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                                  reply_markup=keyboard(1, menu, 6, space_list()))
        await call.answer()


@dp.callback_query_handler(state=Compatibility.gender_choice, text=["–ñ–µ–Ω—â–∏–Ω–∞üë©üèª"])
async def what_is_my_zodiac_sign(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –ñ–µ–Ω—â–∏–Ω–∞üë©üèª"""
    await state.finish()
    gender = call.data
    async with state.proxy() as user_data:
        user_data["1–π –ü–æ–ª"] = gender
    async with state.proxy() as user_data:
        user_data["2–π –ü–æ–ª"] = "–ú—É–∂—á–∏–Ω–∞üë®‚Äçü¶±"
    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id,
                                        reply_markup=None)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await Compatibility.w_first_zodiac_name.set()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ñ–µ–Ω—â–∏–Ω—ãüë©üèª", reply_markup=keyboard(3, zodiaks, 12, space_list()))
    await call.answer()


@dp.message_handler(lambda message: message.text, state=Compatibility.w_first_zodiac_name)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(state=Compatibility.w_first_zodiac_name, text=[key for key in zodiaks().keys()])
async def date_inline_keyboard(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥–∏–∞–∫–∞"""
    # –õ–æ–≤–∏–º –∫–æ–ª–±—ç–∫ –æ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
    zodiak_sign = call.data
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –º–∞—à–∏–Ω—É —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–∞–Ω–Ω—ã–µ
    async with state.proxy() as user_data:
        user_data["1–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"] = zodiaks_compability()[zodiak_sign]
    async with state.proxy() as user_data:
        user_data["1–π Zod"] = zodiak_sign
    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id, reply_markup=None)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await Compatibility.w_second_zodiac_name.set()
    await call.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –¥–ª—è –ú—É–∂—á–∏–Ω—ãüë®‚Äçü¶±", reply_markup=keyboard(3, zodiaks, 12, space_list()))
    await call.answer()


@dp.message_handler(lambda message: message.text, state=Compatibility.w_second_zodiac_name)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(state=Compatibility.w_second_zodiac_name, text=[key for key in zodiaks().keys()])
async def date_inline_keyboard(call: CallbackQuery, state: FSMContext):
    """–ö–æ–ª–±–µ–∫-—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –ª–æ–≤–∏—Ç –∫–Ω–æ–ø–∫—É –∏–∑ –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–æ –∑–Ω–∞–∫–∞–º–∏ –∑–æ–¥–∏–∞–∫–∞"""
    zodiak_sign = call.data
    async with state.proxy() as user_data:
        user_data["2–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"] = zodiaks_compability()[zodiak_sign]
    await bot.edit_message_reply_markup(chat_id=call.from_user.id, message_id=call.message.message_id, reply_markup=None)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await call.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n\n–ñ–µ–Ω—â–∏–Ω–∞ - {user_data['1–π Zod']}\n–ú—É–∂—á–∏–Ω–∞ - {zodiak_sign}")
    await send_page(
        return_history(f'{user_data["1–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"]}_{user_data["2–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"]}')[0][0].split("\n"),
        call.message)
    await Compatibility.w_pagination_page.set()
    await call.answer()


@dp.message_handler(lambda message: message.text, state=Compatibility.w_pagination_page)
async def check_birthday(message: Message, state: FSMContext):
    """–•–µ–Ω–¥–ª–µ—Ä –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≤–≤–µ–¥–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    if message.text == "/start":
        await state.finish()
        await message.answer("–£–∑–Ω–∞–π—Ç–µ —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ –¥–ª—è –í–∞—Å —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                             reply_markup=keyboard(1, menu, 6, space_list()))
    else:
        await message.reply("–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –í—ã—à–µ üì±")


@dp.callback_query_handler(lambda call: True, state=Compatibility.w_pagination_page)
async def pagination_callback(call: CallbackQuery, state: FSMContext):
    if call.data in [str(i) for i in range(1, 12)]:
        page = int(call.data)
        async with state.proxy() as user_data:
            user_data["–ü–∞–≥–∏–Ω–∞—Ü–∏—è"] = page
        await bot.delete_message(
            call.message.chat.id,
            call.message.message_id
        )
        await send_page(
            return_history(f'{user_data["1–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"]}_{user_data["2–π –ó–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞"]}')[0][0].split("\n"),
            call.message, page)
        await call.answer()
    elif call.data == "–ú–µ–Ω—é":
        # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
        await bot.delete_message(
            call.message.chat.id,
            message_id=call.message.message_id
        )
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –º–∞—à–∏–Ω—ã —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ç–æ—Ç –∂–µ
        await state.finish()
        await call.message.answer("–£–∑–Ω–∞–π —á—Ç–æ –≥–æ–≤–æ—Ä—è—Ç –∑–≤—ë–∑–¥—ã –∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∞ —Ç–µ–±–µ —Å—É–¥—å–±–∞‚ú®üí´üåü\n\n",
                                  reply_markup=keyboard(1, menu, 6, space_list()))
        await call.answer()